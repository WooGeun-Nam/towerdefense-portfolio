1:HL["/towerdefense-portfolio/_next/static/media/e4af272ccee01ff0-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
2:HL["/towerdefense-portfolio/_next/static/css/a2d730245c00c31d.css","style"]
0:["s0SxpPlmJ-zFzee4yu_r9",[[["",{"children":["projects",{"children":["roguetower",{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/towerdefense-portfolio/_next/static/css/a2d730245c00c31d.css","precedence":"next"}]],"$L4"]]]]
5:HL["/towerdefense-portfolio/_next/static/css/986f079464c860c4.css","style"]
6:I{"id":4244,"chunks":["185:static/chunks/app/layout-f0f01fbae866464d.js"],"name":"","async":false}
7:I{"id":1443,"chunks":["272:static/chunks/webpack-502300a954e5d59c.js","971:static/chunks/fd9d1056-102022806532a78e.js","864:static/chunks/864-434aad9338f96954.js"],"name":"","async":false}
8:I{"id":8639,"chunks":["272:static/chunks/webpack-502300a954e5d59c.js","971:static/chunks/fd9d1056-102022806532a78e.js","864:static/chunks/864-434aad9338f96954.js"],"name":"","async":false}
9:I{"id":3891,"chunks":["616:static/chunks/616-281c6358976a3d84.js","570:static/chunks/app/projects/layout-61601cf7bf20290d.js"],"name":"","async":false}
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"WooGeun Nam"}],["$","meta","2",{"name":"description","content":"웹 포트폴리오"}],["$","meta","3",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","link","4",{"rel":"icon","href":"./../Logo.ico"}],["$","meta","5",{"name":"next-size-adjust"}]]
3:[null,["$","html",null,{"lang":"ko","className":"scroll-smooth","suppressHydrationWarning":true,"children":[["$","$L6",null,{"src":"https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js","strategy":"afterInteractive"}],["$","$L6",null,{"src":"https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-csharp.min.js","strategy":"afterInteractive"}],["$","$L6",null,{"src":"https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/line-numbers/prism-line-numbers.min.js","strategy":"afterInteractive"}],["$","head",null,{"children":[["$","link",null,{"rel":"stylesheet","href":"https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css"}],["$","link",null,{"rel":"stylesheet","href":"https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/line-numbers/prism-line-numbers.min.css"}]]}],["$","body",null,{"className":"__className_94e1b1 min-h-dvh bg-gray-100 antialiased","children":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":[null,["$","section",null,{"children":[["$","$L9",null,{}],["$","main",null,{"className":"mx-auto w-full max-w-6xl pt-16","children":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","projects","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","projects","children","roguetower","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L8",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$La","$Lb",null],"segment":"__PAGE__"},"styles":[]}],"segment":"roguetower"},"styles":[]}]}],["$","footer",null,{"className":"py-6 pr-6 text-right text-sm text-gray-500","children":"Copyright © 2025. WooGeun-Nam All rights reserved."}]]}],null],"segment":"projects"},"styles":[["$","link","0",{"rel":"stylesheet","href":"/towerdefense-portfolio/_next/static/css/986f079464c860c4.css","precedence":"next"}]]}]}]]}],null]
a:null
c:I{"id":2148,"chunks":["899:static/chunks/app/projects/roguetower/page-56c3dcb6325720dd.js"],"name":"","async":false}
d:I{"id":8016,"chunks":["899:static/chunks/app/projects/roguetower/page-56c3dcb6325720dd.js"],"name":"","async":false}
e:T34c3,using UnityEngine;
using UnityEngine.Audio;
using System.Collections.Generic;
using System.Linq;
using System.Collections;

public class SoundManager : MonoBehaviour
{
    public static SoundManager Instance { get; private set; }

    public AudioMixer masterMixer;

    private AudioSource bgmPlayer;
    private List<AudioSource> sfxSources = new List<AudioSource>();
    private Dictionary<GameObject, AudioSource> loopingSfxSources = new Dictionary<GameObject, AudioSource>();
    [Tooltip("동시에 재생할 수 있는 최대 효과음 개수")]
    [SerializeField] private int maxSfxSources = 20; // 인스펙터에서 조절 가능
    
    // 사운드 쿨다운(재생 조절)을 위한 변수들
    [Tooltip("동일한 사운드를 다시 재생하기까지 필요한 최소 시간 간격 (초)")]
    [SerializeField] private float sfxThrottleTime = 0.05f;
    private Dictionary<string, float> _sfxCooldowns = new Dictionary<string, float>();

    private string currentBgmName; // BGM이 바뀔 때마다 이 변수에 이름을 저장
    
    // 오디오 클립 및 분석 데이터를 관리할 Dictionary
    private Dictionary<string, AudioClip[]> audioClips;
    private Dictionary<string, float> clipPeakVolumes = new Dictionary<string, float>(); // 오디오 클립의 피크 볼륨을 캐싱

    private const float TARGET_PEAK_VOLUME = 0.7f; // 볼륨 정규화를 위한 목표 피크 값 (오디오 클리핑 방지를 위해 1.0f 보다 낮게 설정)

    // === 추가된 상수 정의 ===
    private const string GAME_BGM_PREFIX = "BGM_Game_"; // 인게임 BGM 파일을 식별하기 위한 접두사
    private const string TUTORIAL_BGM_NAME = "BGM_Game_1"; // 튜토리얼에서 사용할 BGM 이름
    
    // 초기화 상태를 외부에 알릴 수 있는 변수
    public bool IsInitialized { get; private set; } = false;
    
    public float InitializationProgress { get; private set; } = 0f; // [추가] 초기화 진행률
    
    private void Awake()
    {
        if (Instance == null)
        {
            Instance = this;
            DontDestroyOnLoad(gameObject);

            bgmPlayer = gameObject.AddComponent<AudioSource>();
            bgmPlayer.outputAudioMixerGroup = masterMixer.FindMatchingGroups("BGM")[0];
            
            for (int i = 0; i < maxSfxSources; i++)
            {
                AudioSource sfxSource = gameObject.AddComponent<AudioSource>();
                sfxSource.outputAudioMixerGroup = masterMixer.FindMatchingGroups("SFX")[0];
                sfxSource.loop = false;
                sfxSources.Add(sfxSource);
            }
            
            IsInitialized = false;
            StartCoroutine(LoadAndAnalyzeAudioClipsAsync());
        }
        else
        {
            Destroy(gameObject);
        }
    }

    // === 볼륨 정규화 기능이 적용된 재생 함수 ===

    // 동일한 BGM이 이미 재생 중일 경우 다시 시작하지 않도록 수정
    public void PlayBGM(string clipName, bool loop = true, float volume = 1.0f, float pitch = 1.0f)
    {
        AudioClip clip = FindClip(clipName);
        if (clip == null) return;

        // 현재 재생 중인 클립이 요청된 클립과 동일하면 아무것도 하지 않고 리턴
        if (bgmPlayer.isPlaying && bgmPlayer.clip != null && bgmPlayer.clip.name == clip.name)
        {
            return;
        }

        bgmPlayer.clip = clip;
        bgmPlayer.loop = loop;
        bgmPlayer.volume = GetAdjustedVolume(clipName, volume);
        bgmPlayer.pitch = pitch;
        bgmPlayer.Play();
        
        currentBgmName = clipName; // BGM 이름 저장
    }
    
    // AnalyticsDebugUI에서 호출할 getter 메소드
    public string GetCurrentBGMName()
    {
        if (bgmPlayer != null && bgmPlayer.isPlaying)
        {
            return currentBgmName;
        }
        return "Not Playing";
    }

    //  게임 BGM 랜덤 재생 메서드
    public void PlayRandomGameBGM()
    {
        // 튜토리얼 완료 여부 확인
        if (PlayerPrefs.GetInt("TutorialCompleted", 0) == 0)
        {
            // 튜토리얼 중일 경우, 지정된 튜토리얼 BGM 재생
            PlayBGM(TUTORIAL_BGM_NAME, true);
        }
        else
        {
            // 튜토리얼 완료 시, 랜덤 BGM 재생
            if (audioClips.TryGetValue("BGM", out AudioClip[] bgmClips))
            {
                // "BGM_Game_" 접두사를 가진 모든 BGM 클립을 리스트로 가져옴
                List<AudioClip> gameBgmList = bgmClips.Where(clip => clip.name.StartsWith(GAME_BGM_PREFIX)).ToList();

                if (gameBgmList.Count > 0)
                {
                    // 리스트에서 랜덤하게 BGM 하나를 선택
                    AudioClip randomClip = gameBgmList[Random.Range(0, gameBgmList.Count)];
                    PlayBGM(randomClip.name, true);
                }
                else
                {
                    Debug.LogWarning($"'{GAME_BGM_PREFIX}' 접두사를 가진 게임 BGM을 찾을 수 없습니다.");
                }
            }
        }
    }
    
    public void PlaySFX(string clipName, float volume = 1.0f, float pitch = 1.0f)
    {
        AudioClip clip = FindClip(clipName);
        if (clip == null) return;
        
        // 이전에 이 사운드를 재생한 기록이 있는지 확인합니다.
        if (_sfxCooldowns.ContainsKey(clipName))
        {
            // 마지막 재생 시간과 현재 시간을 비교하여, 설정된 쿨다운 시간(sfxThrottleTime)이 지나지 않았다면
            // 소리를 재생하지 않고 즉시 함수를 종료합니다.
            if (Time.unscaledTime - _sfxCooldowns[clipName] < sfxThrottleTime)
            {
                return;
            }
        }

        // 오디오 소스 풀에서 비어있는 소스를 찾아옵니다.
        AudioSource sourceToPlay = GetAvailableSfxSource();
        if (sourceToPlay == null) return;
        
        // 재생 직전에, 현재 시간을 마지막 재생 시간으로 기록(갱신)합니다.
        _sfxCooldowns[clipName] = Time.unscaledTime;

        // 찾은 소스를 사용하여 효과음을 재생합니다.
        sourceToPlay.pitch = pitch;
        sourceToPlay.PlayOneShot(clip, GetAdjustedVolume(clipName, volume));
    }

    public void PlayLoopingSFX(string clipName, GameObject caller, float volume = 1.0f, float pitch = 1.0f)
    {
        if (loopingSfxSources.ContainsKey(caller))
        {
            // 이미 재생 중인 경우, 볼륨과 피치만 업데이트
            loopingSfxSources[caller].volume = GetAdjustedVolume(clipName, volume); // 볼륨 업데이트 시에도 정규화 적용
            loopingSfxSources[caller].pitch = pitch;
            return;
        }

        AudioClip clip = FindClip(clipName);
        if (clip != null)
        {
            GameObject obj = new GameObject($"LoopingSFX_{clipName}_{caller.name}");
            obj.transform.SetParent(transform);
            AudioSource source = obj.AddComponent<AudioSource>();
            source.outputAudioMixerGroup = masterMixer.FindMatchingGroups("SFX")[0];
            source.clip = clip;
            source.loop = true;
            source.volume = GetAdjustedVolume(clipName, volume); // 정규화된 볼륨 적용
            source.pitch = pitch;
            source.Play();
            loopingSfxSources.Add(caller, source);
        }
    }

    // === 오디오 클립 로드 및 분석 로직 ===
    
    // [수정] 동기 함수를 비동기 코루틴으로 변경
    private IEnumerator LoadAndAnalyzeAudioClipsAsync()
    {
        audioClips = new Dictionary<string, AudioClip[]>();
        clipPeakVolumes = new Dictionary<string, float>();

        // 지정된 모든 경로의 오디오 클립을 비동기로 로드하고 분석
        yield return StartCoroutine(LoadClipsFromPathAsync("BGM"));
        yield return StartCoroutine(LoadClipsFromPathAsync("Tower"));
        yield return StartCoroutine(LoadClipsFromPathAsync("Enemy"));
        yield return StartCoroutine(LoadClipsFromPathAsync("Skill"));
        yield return StartCoroutine(LoadClipsFromPathAsync("UI"));
        yield return StartCoroutine(LoadClipsFromPathAsync("System"));
        IsInitialized = true; // 모든 로딩이 완료되었음을 알립니다.
    }

    // [수정] 경로에서 오디오 클립을 비동기로 로드하는 코루틴
    private IEnumerator LoadClipsFromPathAsync(string path)
    {
        // 1. 먼저 경로에 있는 모든 클립의 참조를 동기적으로 가져옵니다. (이 과정은 매우 빠름)
        AudioClip[] clips = Resources.LoadAll<AudioClip>("Sound/" + path);

        if (clips.Length > 0)
        {
            // 2. 클립 배열을 저장
            audioClips.Add(path, clips);
        
            // 3. 각 클립에 대해 비동기 로딩 및 분석을 진행합니다.
            foreach (AudioClip clip in clips)
            {
                if (!clipPeakVolumes.ContainsKey(clip.name))
                {
                    string fullPath = "Sound/" + path + "/" + clip.name;

                    ResourceRequest request = Resources.LoadAsync<AudioClip>(fullPath);
                
                    // 로딩이 완료될 때까지 기다립니다.
                    while (!request.isDone)
                    {
                        yield return null;
                    }
                    // 로딩이 완료된 클립을 분석합니다.
                    float peakVolume = AnalyzeClipPeakVolume((AudioClip)request.asset);
                    clipPeakVolumes.Add(clip.name, peakVolume);
                }
            }
        }
    }

    private float AnalyzeClipPeakVolume(AudioClip clip)
    {
        // 클립의 모든 오디오 샘플 데이터를 가져옴
        float[] samples = new float[clip.samples * clip.channels];
        clip.GetData(samples, 0);

        float peakVolume = 0f;
        for (int i = 0; i < samples.Length; i++)
        {
            // 샘플의 절대값이 현재 피크 값보다 크면 업데이트
            float currentSample = Mathf.Abs(samples[i]);
            if (currentSample > peakVolume)
            {
                peakVolume = currentSample;
            }
        }
        return peakVolume;
    }

    private float GetAdjustedVolume(string clipName, float originalVolume)
    {
        if (clipPeakVolumes.TryGetValue(clipName, out float peakVolume))
        {
            // 피크 볼륨이 매우 작으면(거의 무음이면) 과도하게 증폭되는 것을 방지
            if (peakVolume < 0.01f)
            {
                return originalVolume;
            }
            // 목표 피크 볼륨을 기준으로 정규화된 볼륨 계산
            return originalVolume * (TARGET_PEAK_VOLUME / peakVolume);
        }
        return originalVolume; // 분석 데이터가 없는 경우 원래 볼륨 사용
    }

    // === 기존 유틸리티 함수들 (변경 없음) ===

    public void StopLoopingSFX(GameObject caller)
    {
        if (loopingSfxSources.ContainsKey(caller))
        {
            AudioSource source = loopingSfxSources[caller];
            if (source != null)
            {
                source.Stop();
                Destroy(source.gameObject);
            }
            loopingSfxSources.Remove(caller);
        }
    }

    public void StopAllLoopingSFX()
    {
        foreach (var entry in loopingSfxSources)
        {
            entry.Value.Stop();
            Destroy(entry.Value.gameObject);
        }
        loopingSfxSources.Clear();
    }

    public void SetBGMVolume(float volume)
    {
        float dB = ConvertVolumeToDb(volume);
        masterMixer.SetFloat("BGMVolume", dB);
    }

    public void SetSFXVolume(float volume)
    {
        float dB = ConvertVolumeToDb(volume);
        masterMixer.SetFloat("SFXVolume", dB);
    }

    public void SetMasterVolume(float volume)
    {
        float dB = ConvertVolumeToDb(volume);
        masterMixer.SetFloat("MasterVolume", dB);
    }

    private float ConvertVolumeToDb(float volume)
    {
        return volume > 0.0001f ? Mathf.Log10(volume) * 20 : -80f;
    }

    public void StopAllSounds()
    {
        bgmPlayer.Stop();
        
        // sfxPlayer.Stop(); // 기존 코드 삭제
        foreach (var source in sfxSources)
        {
            source.Stop();
        }

        StopAllLoopingSFX();
    }

    public AudioClip FindClip(string clipName)
    {
        foreach (var key in audioClips.Keys)
        {
            foreach (var clip in audioClips[key])
            {
                if (clip.name.Equals(clipName))
                {
                    return clip;
                }
            }
        }
        Debug.LogWarning($"AudioClip not found: {clipName}"); // 클립을 찾지 못했을 때 경고 메시지 추가
        return null;
    }
    
    private AudioSource GetAvailableSfxSource()
    {
        // sfxSources 리스트를 처음부터 순회합니다.
        foreach (var source in sfxSources)
        {
            // 현재 재생 중이 아닌 소스를 찾으면, 그 소스를 즉시 반환합니다.
            if (!source.isPlaying)
            {
                return source;
            }
        }
        
        // 모든 소스가 사용 중이라면(위의 반복문에서 반환되지 않았다면), null을 반환합니다.
        return null;
    }
}b:["$","main",null,{"className":"mx-auto max-w-6xl px-4 py-16 space-y-12","children":[["$","section",null,{"className":"grid gap-8 md:grid-cols-2 items-stretch","children":[["$","div",null,{"className":"rounded-xl overflow-hidden shadow-sm","children":["$","$Lc",null,{"src":"/SiteLogo.png","alt":"RogueTower 메인","className":"w-full h-full object-cover"}]}],["$","div",null,{"className":"flex flex-col justify-between","children":[["$","div",null,{"children":[["$","h1",null,{"className":"text-4xl font-bold underline decoration-blue-500 underline-offset-8","children":"RogueTower"}],["$","dl",null,{"className":"grid grid-cols-[120px_1fr] gap-x-4 gap-y-6 text-gray-800 mt-8","children":[["$","dt",null,{"className":"font-semibold text-gray-600","children":"ROLE"}],["$","dd",null,{"children":"Programmer, Game Designer, Artist"}],["$","dt",null,{"className":"font-semibold text-gray-600","children":"DURATION"}],["$","dd",null,{"children":"2024.10 ~ 2025.08"}],["$","dt",null,{"className":"font-semibold text-gray-600","children":"TEAM"}],["$","dd",null,{"children":"1인 개발"}],["$","dt",null,{"className":"font-semibold text-gray-600","children":"PLATFORM"}],["$","dd",null,{"children":"PC"}]]}]]}],["$","div",null,{"className":"mt-6 flex gap-4","children":["$","a",null,{"href":"https://github.com/WooGeun-Nam/RogueTower-Code","target":"_blank","rel":"noopener noreferrer","className":"inline-flex items-center gap-2 rounded-full px-5 py-3 text-sm font-semibold bg-gray-200 text-gray-900 hover:bg-gray-300 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-300","children":"GitHub Source"}]}]]}]]}],["$","section",null,{"className":"pt-8","children":["$","$Ld",null,{"codeAssets":{"SoundManager":"$e"}}]}]]}]
